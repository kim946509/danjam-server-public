package com.example.danjamserver.notice.service.impl;import com.example.danjamserver.notice.domain.Notice;import com.example.danjamserver.notice.dto.FcmTokenDto;import com.example.danjamserver.notice.dto.FcmTokenSendDto;import com.example.danjamserver.notice.repository.NoticeRepository;import com.example.danjamserver.notice.service.FcmConfigService;import com.example.danjamserver.notice.service.FcmTokenService;import com.example.danjamserver.springSecurity.dto.CustomUserDetails;import com.example.danjamserver.user.domain.User;import com.example.danjamserver.user.repository.UserRepository;import com.example.danjamserver.util.exception.BaseException;import com.example.danjamserver.util.exception.FcmTokenNotFoundException;import com.example.danjamserver.util.exception.ResultCode;import com.example.danjamserver.util.response.RestResponse;import com.google.firebase.messaging.FirebaseMessaging;import com.google.firebase.messaging.FirebaseMessagingException;import com.google.firebase.messaging.Message;import com.google.firebase.messaging.Notification;import jakarta.persistence.EntityNotFoundException;import java.util.concurrent.CompletableFuture;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.dao.DataAccessException;import org.springframework.stereotype.Service;@Service@Slf4j@RequiredArgsConstructorpublic class FcmTokenServiceImpl implements FcmTokenService {    private final NoticeRepository noticeRepository;    private final UserRepository userRepository;    private final FcmConfigService fcmConfigService;    /**     * FCM TOKEN 저장     *     * @return RestResponse<Obejec            * @ param1 customUserDetails            * @ param2 fcmTokenDto     */    @Override    public RestResponse<Object> saveFcmToken(CustomUserDetails customUserDetails, FcmTokenDto fcmTokenDto) {        try {            Long userId = customUserDetails.getId();            String token = fcmTokenDto.getToken();            // 기존에 저장된 FCM 토큰이 있는지 확인하고, 없으면 새로 저장            Notice existingNotice = noticeRepository.findByUserId(userId);            User user = userRepository.findById(Math.toIntExact(userId))                    .orElseThrow(() -> new EntityNotFoundException("유저가 존재하지 않습니다."));            if (existingNotice == null) {                Notice notice = Notice.builder()                        .user(user)                        .token(token)                        .build();                noticeRepository.save(notice);                return RestResponse.success("토큰 저장 성공");            } else {                existingNotice.setFcmToken(token);                noticeRepository.save(existingNotice);                return RestResponse.success("토큰 갱신 성공");            }        } catch (EntityNotFoundException e) {            return RestResponse.error(ResultCode.NO_MATCHING_USER_FOUND);        }    }    /**     * FCM SDK 방식을 통한 서버 메시지 전송     *     * @param tokenSendDto token, title, body     * @return RestResponse<Object>     */    @Override    public RestResponse<Object> sendMessage(FcmTokenSendDto tokenSendDto) {        try {            fcmConfigService.validateFcmTokenSendDto(tokenSendDto);            // FCM 메시지 생성            Message.Builder message = Message.builder()                    .setNotification(Notification.builder()                            .setTitle(tokenSendDto.getTitle())                            .setBody(tokenSendDto.getBody())                            .setImage(null)                            .build())                    .setToken(tokenSendDto.getToken());            // ios, android config            switch (tokenSendDto.getPlatform().toLowerCase()) {                case "android" -> message.setAndroidConfig(fcmConfigService.tokenAndroidConfig(tokenSendDto));                case "ios" -> message.setApnsConfig(fcmConfigService.tokenApnsConfig(tokenSendDto));            }            //비동기 처리            CompletableFuture.supplyAsync(() -> {                try {                    return FirebaseMessaging.getInstance().send(message.build());                } catch (FirebaseMessagingException e) {                    e.printStackTrace();                    throw new BaseException(ResultCode.INTERNAL_SERVER_ERROR, "FCM 메시지 전송 실패: " + e.getMessage());                }            });            return RestResponse.success("메시지 전송 요청 완료");        } catch (Exception e) {            e.printStackTrace();            return RestResponse.error(ResultCode.INTERNAL_SERVER_ERROR,                    "메시지 전송 실패: " + e.getMessage());        }    }    /**     * 주어진 사용자에 대한 FCM 토큰을 검색합니다.     *     * @param userId     * @return token     */    public String getFcmToken(Long userId) {        String token = null;        try {            Notice notice = noticeRepository.findByUserId(userId);            if (notice == null || notice.getFcmToken() == null) {                throw new FcmTokenNotFoundException();            }            token = notice.getFcmToken();        } catch (DataAccessException e) {            throw new BaseException(ResultCode.INTERNAL_SERVER_ERROR);        }        return token;    }}